================================================
Documentation du projet IA de plagiarism checker
================================================

Bienvenue dans la documentation du projet D√©tection de plagiat par Intelligence Artificielle √† l'aide de RAG et d'analyse s√©mantique avanc√©e.Ce document d√©taille les m√©thodologies, les outils utilis√©s, ainsi que les r√©sultats obtenus pour identifier les cas de plagiat, qu‚Äôils soient exacts, paraphras√©s ou s√©mantiquement similaires.L‚Äôobjectif de ce projet est de d√©velopper un syst√®me de d√©tection robuste en combinant plusieurs approches

*Table des mati√®res*

  - introduction
  - objectifs du projet
  - installation
  - pipeline 
  - creation d'une base de donn√©s a partir de llama_parse 
  - application des approches (recherche hybride)
  - visualisation des r√©sultat 
  - cr√©ation d'une interface streamlit 
  - Travaux Futurs
  - conclusion


.. AI Plagiarism Sentinel Pro documentation master file

==============================================
AI Plagiarism Sentinel Pro ‚Äì D√©tection avanc√©e
==============================================

Introduction
============

La d√©tection automatique du plagiat est devenue un enjeu crucial dans le monde acad√©mique et professionnel, o√π la v√©rification de l'originalit√© d'un contenu est essentielle √† la cr√©dibilit√© intellectuelle et √† l‚Äôint√©grit√© des travaux. 

Ce projet propose une solution intelligente et robuste de d√©tection de plagiat en temps r√©el, exploitant les derni√®res avanc√©es en **traitement du langage naturel (NLP)**, **recherche vectorielle**, et **mod√®les de similarit√© s√©mantique multilingue**.

En s‚Äôappuyant sur une combinaison d‚Äô**embeddings puissants**, de **moteurs de recherche hybride**, de **mod√®les cross-encoders**, ainsi que d‚Äôune **analyse stylistique avanc√©e**, cette plateforme permet de d√©tecter diff√©rents types de plagiat : copie exacte, paraphrase, similitude conceptuelle, ou correspondance multilingue.

Le tout est encapsul√© dans une interface interactive d√©velopp√©e avec **Streamlit**, offrant √† l'utilisateur une exp√©rience fluide, visuelle, et totalement explicable.

Objectifs du projet
===================

- **Fournir un syst√®me de d√©tection de plagiat automatis√© et intelligent** :
  
  - Bas√© sur une base vectorielle *Chroma* enrichie par des embeddings (*Ollama embeddings*).
  - Capable d‚Äôidentifier non seulement des copies exactes, mais aussi des paraphrases et similitudes conceptuelles, y compris entre langues diff√©rentes (fran√ßais/anglais).

- **D√©montrer l‚Äôutilisation combin√©e de technologies modernes** :
  
  - üß† *LangChain*, *TF-IDF*, *Cross-Encoder* (MS-MARCO) pour l‚Äôanalyse s√©mantique.
  - üìö *SpaCy* et *textstat* pour l‚Äôanalyse stylistique, lisibilit√©, structure grammaticale, diversit√© lexicale.
  - üìä *Streamlit*, *Plotly*, *WordCloud*, *Pyvis* pour la visualisation avanc√©e et l‚Äôexplicabilit√©.

- **Assurer une analyse compl√®te et interpr√©table** :
  
  - G√©n√©ration d‚Äôun rapport technique JSON d√©taill√©.
  - R√©sum√© ex√©cutif avec score global, alertes de plagiat, et recommandations.
  - Visualisation des correspondances (r√©seaux interactifs, nuages de mots, graphiques).

- **Garantir une exp√©rience utilisateur professionnelle** :
  
  - Interface responsive avec personnalisation CSS.
  - Chargement de texte via saisie directe, fichiers (.pdf, .docx‚Ä¶), ou URL.
  - T√©l√©chargement dynamique de rapports avec score et diagnostic.




Installation
============

Les biblioth√®ques suivantes sont n√©cessaires pour le projet :

1. **os** : Manipulation des fichiers et chemins.
2. **pickle** : S√©rialisation et sauvegarde des objets Python.
3. **cv2** : Traitement d'images avec OpenCV.
4. **numpy** : Manipulation de matrices et calculs num√©riques.
5. **streamlit** : Interface web interactive pour l‚Äôutilisateur.
6. **langchain.vectorstores** : Gestion des bases vectorielles avec Chroma.
7. **langchain_community.embeddings** : G√©n√©ration des embeddings avec Ollama.
8. **langdetect** : D√©tection automatique de la langue d‚Äôun texte.
9. **typing** : Annotations de types (`List`, `Dict`, etc.).
10. **time** : Gestion du temps (dur√©e d‚Äôanalyse, timestamps).
11. **pandas** : Manipulation et affichage de tableaux de donn√©es.
12. **difflib** : Comparaison de cha√Ænes pour la similarit√© exacte.
13. **matplotlib.pyplot** : Visualisation de donn√©es.
14. **plotly.express** : Graphiques interactifs (camemberts, barres).
15. **collections.defaultdict** : Regroupement d‚Äô√©l√©ments similaires.
16. **re** : Expressions r√©guli√®res pour le nettoyage de texte.
17. **hashlib** : Hachage des textes pour la d√©tection exacte.
18. **sentence_transformers** : Calcul avanc√© de similarit√© s√©mantique (CrossEncoder).
19. **sklearn.feature_extraction.text** : TF-IDF vectorisation.
20. **sklearn.metrics.pairwise** : Similarit√© cosinus.
21. **PIL.Image** : Chargement et affichage d‚Äôimages.
22. **requests** : Requ√™te HTTP pour charger des images ou contenus.
23. **io.BytesIO** : Manipulation de contenu binaire.
24. **json** : S√©rialisation JSON pour les rapports.
25. **networkx** : Cr√©ation de graphes de similarit√©.
26. **pyvis.network** : Visualisation interactive de r√©seaux.
27. **tempfile** : Cr√©ation de fichiers temporaires.
28. **spacy** : Analyse grammaticale et entit√©s nomm√©es.
29. **wordcloud.WordCloud** : Nuage de mots bas√© sur les correspondances.
30. **textstat** : Analyse de lisibilit√©.
31. **streamlit.components.v1.html** : Affichage de composants HTML personnalis√©s.
32. **docx2txt** : Extraction de texte depuis fichiers Word.
33. **PyPDF2** : Extraction de texte depuis fichiers PDF.
34. **base64** : Encodage d‚Äôimages pour l‚Äôaffichage CSS.
35. **annotated_text** : Mise en √©vidence de texte dans Streamlit.
36. **st_aggrid** : Tableaux interactifs dans Streamlit.
37. **ollama** : Requ√™tes vers un mod√®le de langage local.

.. code-block:: python

   import os
   import pickle
   import cv2
   import numpy as np
   import streamlit as st
   import time
   import pandas as pd
   import matplotlib.pyplot as plt
   import plotly.express as px
   import re
   import hashlib
   import json
   import tempfile
   import requests
   import base64
   import docx2txt
   import PyPDF2
   import networkx as nx
   from PIL import Image
   from io import BytesIO
   from difflib import SequenceMatcher
   from collections import defaultdict
   from typing import List, Dict, Any, Tuple
   from sentence_transformers import CrossEncoder
   from sklearn.feature_extraction.text import TfidfVectorizer
   from sklearn.metrics.pairwise import cosine_similarity
   from langchain.vectorstores import Chroma
   from langchain_community.embeddings import OllamaEmbeddings
   from wordcloud import WordCloud
   import spacy
   import textstat
   from streamlit.components.v1 import html
   from annotated_text import annotated_text
   from st_aggrid import AgGrid
   import ollama


pipeline
========
.. list-table::
   :widths: 50 50
   :align: center

   * - .. image:: image/1.png
         :alt: Image 1
         :width: 300px
     - .. image:: image/2.png
         :alt: Image 2
         :width: 300px




Travaux Futurs
==============

1. Am√©liorer les mod√®les en utilisant plus de donn√©es.
2. √âtendre la classification pour inclure d'autres comportements (vapoter, boire, etc.).

Conclusion
==========

Ce projet d√©montre la puissance de *MediaPipe* et *TensorFlow* pour r√©soudre des probl√®mes critiques li√©s √† la s√©curit√© et au bien-√™tre. L'int√©gration de ces outils offre une solution robuste¬†et¬†extensible.
